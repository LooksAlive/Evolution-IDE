/* Autogenerated by mlir-tblgen; don't manually edit */
#ifdef GEN_PASS_CLASSES

//===----------------------------------------------------------------------===//
// OptReduction
//===----------------------------------------------------------------------===//

template <typename DerivedT>
class OptReductionBase : public ::mlir::OperationPass<ModuleOp> {
public:
  OptReductionBase() : ::mlir::OperationPass<ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  OptReductionBase(const OptReductionBase &) : ::mlir::OperationPass<ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}

  /// Returns the command-line argument attached to this pass.
  ::llvm::StringRef getArgument() const override { return "opt-reduction-pass"; }

  /// Returns the derived pass name.
  ::llvm::StringRef getName() const override { return "OptReduction"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

protected:
};

//===----------------------------------------------------------------------===//
// ReductionTree
//===----------------------------------------------------------------------===//

template <typename DerivedT>
class ReductionTreeBase : public ::mlir::OperationPass<ModuleOp> {
public:
  ReductionTreeBase() : ::mlir::OperationPass<ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  ReductionTreeBase(const ReductionTreeBase &) : ::mlir::OperationPass<ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}

  /// Returns the command-line argument attached to this pass.
  ::llvm::StringRef getArgument() const override { return "reduction-tree"; }

  /// Returns the derived pass name.
  ::llvm::StringRef getName() const override { return "ReductionTree"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

protected:
};
#undef GEN_PASS_CLASSES
#endif // GEN_PASS_CLASSES
#ifdef GEN_PASS_REGISTRATION

//===----------------------------------------------------------------------===//
// OptReduction Registration
//===----------------------------------------------------------------------===//

inline void registerOptReductionPass() {
  ::mlir::registerPass("opt-reduction-pass", "A reduction pass wrapper for optimization passes", []() -> std::unique_ptr<::mlir::Pass> {
    return ;
  });
}

//===----------------------------------------------------------------------===//
// ReductionTree Registration
//===----------------------------------------------------------------------===//

inline void registerReductionTreePass() {
  ::mlir::registerPass("reduction-tree", "A general reduction tree pass for the MLIR Reduce Tool", []() -> std::unique_ptr<::mlir::Pass> {
    return ;
  });
}

//===----------------------------------------------------------------------===//
//  Registration
//===----------------------------------------------------------------------===//

inline void registerPasses() {
  registerOptReductionPass();
  registerReductionTreePass();
}
#undef GEN_PASS_REGISTRATION
#endif // GEN_PASS_REGISTRATION
